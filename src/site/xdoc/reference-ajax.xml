<?xml version="1.0"?>
<document>

  <properties>
    <title>JSF Extensions AJAX Reference</title>
  </properties>

  <body>

    <p>This document is a reference to the JavaScript and JSP/Facelets
    entry points to JavaServer(TM) Faces Technology Extensions Dynamic
    Faces (DynaFaces).</p>

    <section name="JSP/Facelets tags">

      <p>For complete reference materials, see the <a
      href="ajax/tlddocs">TagLibrary Documentation</a>.</p>

<!-- PENDING(edburns): Add ajaxZone tag -->

      <subsection name="Scripts Component">

      <p>Convenience component for rendering all the scripts
       necessary for using the jsf-extensions ajax feature.  Place this
       inside &lt;f:view&gt; yet before any usages of the AJAX
       JavaScript objects.  Subsequent occurrences of this tag in the
       page will produce no output.</p>

       <p>Please see <a href="ajax/tlddocs/jsfExt/scripts.html">the tag
       library documentation</a> for details.</p>

       <h4>Usage</h4>

<source><code>
&lt;%@ taglib prefix="jsfExt" uri="http://java.sun.com/jsf/extensions/dynafaces" %&gt;
&lt;f:view&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;jsfExt:scripts /&gt;
  &lt;/head&gt;
  &lt;body&gt; &lt;!-- body omitted --&gt; &lt;/body&gt;
&lt;/html&gt;
</code></source>

      </subsection>

      <subsection name="AjaxZone Component">

      <p>Convenience component marking the regions of a page that should
      be updated via AJAX.  When using this component, you do not need
      to use the <code>Scripts</code> component because the zone will
      cause the required scripts to be rendered.</p>

       <p>Please see <a href="ajax/tlddocs/jsfExt/ajaxZone.html">the tag
       library documentation</a> for details.</p>



       <h4>Usage</h4>

<source><code>
&lt;jsfExt:ajaxZone id="zone2" interactionType="input" 
                inspectElement="inspectElement"
                eventType="click" collectPostData="extractParams"
                action="#{carstore.currentModel.updatePricing}"&gt;
  &lt;!-- JSF and HTML content goes here. --&gt;
&lt;/jsfExt:ajaxZone&gt;

</code></source>

      </subsection>

    </section>
    
    <section name="JavaScript Functions">

<!-- PENDING(edburns): Add examples for each of these -->

      <p>This section lists the JavaScript functions and classes exposed
      by the DynaFaces JavaScript library.</p>

      <subsection name="DynaFaces.fireAjaxTransaction">

        <p>When invoked, causes an AJAX request with the specified
        options to be sent to the Faces server immediately.  The
        response to this request comes in the form of an XML document
        that is parsed by the DynaFaces JavaScript library and used to
        update the DOM of the current view.</p>

        <h4>Usage</h4>

<source><code>
&lt;ANY_HTML_OR_JSF_ELEMENT 
on|EVENT|="DynaFaces.fireAjaxTransaction(THIS, { |OPTIONS| });" /&gt;
</code></source>

       <p>Where <code>ANY_HTML_OR_JSF_ELEMENT</code> is any jsf
       component or HTML element from which you emit the event,
       <code>THIS</code> is a JavaScript reference to the HTML element
       given earlier, <code>|EVENT|</code> is any javascript event
       supported by that element, such as <code>onmousedown</code>,
       <code>onclick</code>, <code>onblur</code>, etc, and <code>{
       |OPTIONS| }</code> is an optional argument that is a JavaScript
       <a
       href="http://www.quirksmode.org/js/associative.html">associative
       array</a> supporting the following options.</p>

       <dl>

<dt><p>asynchronous</p>
</dt>

<dd>boolean value.  True by default.  If false the ajax request will be
made asynchronously.
</dd>

        <dt><p>execute</p></dt>

        <dd><p>Comma separated string containing a list of client ids
        against which the <code>execute</code> portion of the request
        processing lifecycle must be run.  If the value of the option is
        the single string "none" without the quotes, the
        <code>execute</code> portion of the lifecycle will be
        effectively skipped.  If this option is not specified at all,
        the value of the <code>render</code> parameter is used as the
        value of the option.  If that is not specified, the entire view
        is traversed during the <code>execute</code> portion of the
        request proecssing lifecycle.</p></dd>

<dt><p>render</p>
</dt>

<dd><p>Comma separated string containing a list of client ids against
which the <code>render</code> portion of the request processing
lifecycle must be run.  If not specified, the entire view is rendered.
If the value of the option is the single string "none" without the
quotes, the <code>render</code> portion of the lifecycle will be
effectively skipped.</p>
</dd>

<dt><p>inputs</p>
</dt>

<dd><p>Comma separated string containing a list of client ids of input
elements whose values should be submitted to the server.  If not
specified, all the values of all input elements in the current form are
submitted.</p>
</dd>

<dt><p>methodName</p>
</dt>

<dd><p>|CLIENT_ID|,|METHOD_NAME|,[phaseId]</p>

<p>If specified, must be the only option, and must conform to the above
syntax, where <code>|CLIENT_ID|</code> is the client id of the component
to be the source of the event, <code>|METHOD_NAME|</code> is the name of
a method on the component named by <code>|CLIENT_ID|</code>, and the
optional <code>phaseId</code> indicates the lifecycle phase in which
this method expression should be invoked.  Given the
<code>|METHOD_NAME|</code>, the renderer for the component, if any, is
consulted for for a matching method with the signature <code>public void
methodName(FacesContext c)</code>.  If found, that method is used.  If
not, the component is consulted for a matching method with the signature
<code>public void methodName(FacesContext c)</code>, if found, that
method is used.  Otherwise an exception is thrown.</p>

</dd>


<dt><p>closure</p>
</dt>

<dd><p>If specified, this is a JavaScript object is kept locally and
passed to the <code>replaceElement</code> and/or the
<code>postInstallHook</code> callback functions.</p>
</dd>

<dt><p>xjson</p>
</dt>

<dd><p>If specified, this is a JavaScript associative array object that
will be sent up to the server in the <code>X-JSON</code> header.  This
value may be operated on by the server.  The possibly modified value
will be returned to the client as the last argument in the
<code>replaceElement</code> and/or the
<code>postInstallHook</code> callback functions.</p>
</dd>


<dt><p>replaceElement</p>
</dt>

<dd><p>The name of a globally scoped function that conforms to the following signature.</p>

<pre><code>
function replaceElement(id, content, [closure], [xjson]);
</code></pre>

<p>This function is called for each component that needs to be
re-rendered with data from this ajax response.  The function is expected
to take the content of the <code>content</code> argument and replace the
DOM element referenced by the <code>id</code> argument.  The function is
expected to invoke any scripts that may be present in
<code>content</code>.  The optional argument <code>closure</code> is
whatever was passed as the <code>closure</code> option to the
<code>DynaFaces.fireAjaxTransaction</code> or
<code>DynaFaces.installDeferredAjaxTransaction</code> that initiated the ajax
request for this response.  The optional argument <code>xjson</code> is
whatever was passed as the <code>xjson</code> option to the
<code>DynaFaces.fireAjaxTransaction</code> or <code>DynaFaces.installDeferredAjaxTransaction</code> that
initiated the ajax request for this response.  The <code>xjson</code>
agrument is passed to the server and may have been modified by the
server.</p>

</dd>

<dt><p>postReplace</p>
</dt>

<dd><p>The name of a globally scoped function that conforms to the
following signature.</p>

<pre><code> function postReplace(ajaxZone, innerHTML, [closure], [xjson]);
</code></pre>

<p>This function is called after the markup replacement for each
component that needs to be re-rendered with data from this ajax
response.  The optional argument <code>closure</code> is whatever was
passed as the <code>closure</code> option to the
<code>DynaFaces.fireAjaxTransaction</code> or
<code>DynaFaces.installDeferredAjaxTransaction</code> that initiated the ajax
request for this response.  The optional argument <code>xjson</code> is
whatever was passed as the <code>xjson</code> option to the
<code>DynaFaces.fireAjaxTransaction</code> or
<code>DynaFaces.installDeferredAjaxTransaction</code> that initiated the ajax
request for this response.  The <code>xjson</code> agrument is passed to
the server and may have been modified by the server.</p>

</dd>


       </dl>      

      </subsection>

      <subsection name="DynaFaces.installDeferredAjaxTransaction">

       <p>This function extends the functionality of
       <code>DynaFaces.fireAjaxTransaction</code> and uses the Prototype <a
       href="http://www.sergiopereira.com/articles/prototype.js.html#Reference">Event.observe</a>
       feature to cause a <code>DynaFaces.fireAjaxTransaction</code> call to be
       emitted from a specific element in the DOM when the specified
       JavaScript event occurs.  The options supported are exactly the
       same as in <code>DynaFaces.fireAjaxTransaction</code>.</p>

       <h4>Usage</h4>

<pre><code>
DynaFaces.installDeferredAjaxTransaction(ELEMENT, EVENT_STRING_LITERAL, { |OPTIONS| });
</code></pre>

<p>Where <code>ELEMENT</code> is a JavaScript reference to a DOM element
that is to be instrumented with AJAX behavior.
<code>EVENT_STRING_LITERAL</code> is a string, with or without the "on"
prefix, that must be a JavaScript event type.  Examples include,
"click", "blur", "mouseover", etc.  <code>|OPTIONS|</code> is as
specified above, in the section <a
href="#DynaFaces.fireAjaxTransaction">DynaFaces.fireAjaxTransaction</a>.</p>

<source><pre>
&lt;script type="text/javascript"&gt;

  // Assume there is code to populate the associative array
  // <i>elements</i> with elements that should be AJAXified.  

  options = new Object();

  // Assume there is code to populate the options.  The set of
  // supported options is described previously in the section
  // <a href="#DynaFaces.fireAjaxTransaction">DynaFaces.fireAjaxTransaction</a>.

  var element;
  for (var e in elements) {
    element = elements[e];
    DynaFaces.installDeferredAjaxTransaction(e, "click", options);
  }
</pre></source>

      </subsection>


    </section>

  </body>

</document>
