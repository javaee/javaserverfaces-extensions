<?xml version="1.0" encoding="UTF-8" ?>

<!--  
 $Id: jsf-extensions.tld,v 1.4 2005/12/15 00:00:54 edburns Exp $ -->


<taglib xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd"
    version="2.1">


  <description>
    Tags for components in the jsf-extensions library
  </description>

  <tlib-version>0.03</tlib-version>
  <short-name>jsfExt</short-name>
  <uri>http://java.sun.com/jsf/extensions</uri>
 <tag>
    <description>
        <![CDATA[

        <p>Call <code>getValue( )</code> on the expression given by the
        value of the <code>value</code> attribute and pass the result to
        a call to <code>setValue( )</code> on the expression given by
        the value of the <code>var</code> attribute.</p>

        <p>Both the <code>value</code> and <code>var</code> attributes
        are required.  It is valid to give a literal string as the value
        of the <code>value</code> attribute.  The results of giving a
        literal string as the value of the <code>var</code> attribute
        are undefined.</p>

        ]]>
    </description>
    <name>set</name>
    <tag-class>com.sun.faces.taglib.jsf_extensions.SetTag</tag-class>
    <body-content>JSP</body-content>
    <attribute>
        <description>
          <![CDATA[

          <p>Serves as the target of the value obtained from calling
          <code>getValue( )</code> on the value of the
          <code>value</code> attribute.</p>

          ]]>
        </description>
        <name>var</name>
        <required>true</required>
        <deferred-value>
	    <type>java.lang.Object</type>
        </deferred-value>
    </attribute>
    <attribute>
        <description>
          <![CDATA[

          <p>Serves as the source of the value that is set by calling
          <code>setValue( )</code> on the value of the <code>var</code>
          attribute.</p>

          ]]>

        </description>
        <name>value</name>
        <required>false</required>
        <deferred-value>
	    <type>java.lang.Object</type>
        </deferred-value>
    </attribute>
  </tag>
  
  <tag>
    <name>ajaxZone</name>
    <tag-class>com.sun.faces.taglib.jsf_extensions.AjaxZoneTag</tag-class>
    <body-content>JSP</body-content>
    <attribute>
      <name>id</name>
    </attribute>
    <attribute>
        <description>
          <![CDATA[

          <p>Convey CSS style information to the renderer</p>

          ]]>

        </description>
        <name>style</name>
        <required>false</required>
        <deferred-value>
	    <type>java.lang.String</type>
        </deferred-value>
    </attribute>
    <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute indicates what kind of components
          are contained within this zone.  Valid values are "input" and
          "output".  If not present the default is "output".  A value of
          "input" will cause the DOM children of this component to have
          the event handler specified as the value of the "eventType"
          attribute replaced with the user supplied function given as
          the value of the "eventHook" attribute.  For example, if the
          components inside this zone did a form submit on the
          "onmousedown" event, we would indicate our desire to replace
          this "onmousedown" with our own user supplied function like
          this:
          </p>

<pre><code>
&lt;jsfExt:ajaxZone interactionType="input" eventType="onmousedown" 
          eventHook="replaceOnMouseDown"&gt;
  &lt;d:scroller&gt;
    &lt;!-- nested components  --&gt;
  &lt;/d:scroller&gt;
&lt;/jsfExt:ajaxZone&gt;
</code></pre>

          <p>The details of the <code>replaceOnMouseDown</code> function
          are described in the docs for the <code>eventHook</code>
          attribute.</p>

          <p>If "output" is specified as the value, none of the child
          elements are modified.</p>

          ]]>

        </description>
        <name>interactionType</name>
        <required>false</required>
        <deferred-value>
	    <type>java.lang.String</type>
        </deferred-value>
    </attribute>

    <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute indicates what kind of JavaScript
          event to intercept with the function named as the value of the
          <code>eventHook</code> attribute.  For example:
          </p>

<pre><code>
&lt;jsfExt:ajaxZone interactionType="input" eventType="onmousedown" 
          eventHook="replaceOnMouseDown"&gt;
  &lt;d:scroller&gt;
    &lt;!-- nested components  --&gt;
  &lt;/d:scroller&gt;
&lt;/jsfExt:ajaxZone&gt;
</code></pre>
          ]]>

        </description>
        <name>eventType</name>
        <required>false</required>
        <deferred-value>
	    <type>java.lang.String</type>
        </deferred-value>
    </attribute>

    <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute names a function to be called when
          the JavaScript event specified by the value of the
          <code>eventType</code> occurs.  The function must conform to
          the following signature:
          </p>

<pre><code>
function handler(originalScript, outProps, invocation);
</code></pre>

          <p><code>originalScript</code> is the value of the event as
          specified in the original rendered code.
          <code>invocation</code> is an associative array with two
          properties.  <code>"args"</code> is an array of the arguments
          passed to the target event handler from the browser.
          <code>"outProps"</code> is a pre-allocated associative array
          whose contents will be submitted with the ajax request to the
          server in response to this zone receiving the JavaScript event
          specified in the <code>eventType</code> attribute.
          <code>"proceed"</code> is a function you can call that will
          call the target event handler.  The return value from the
          <code>proceed</code> function can be acted on in the handler
          as appropriate.  For example the following
          <code>ajaxZone</code> tag will intercept the
          <code>onmousedown</code></p>

<pre><code>
&lt;jsfExt:ajaxZone interactionType="input" eventType="onmousedown" 
          eventHook="replaceOnMouseDown"&gt;
  &lt;d:scroller&gt;
    &lt;!-- nested components  --&gt;
  &lt;/d:scroller&gt;
&lt;/jsfExt:ajaxZone&gt;

&lt;script type="text/JavaScript"&gt;
&lt;!--
// Take the original script, extract any name/value pairs
// found within the script, place them into the outProps 
// associative array.  DO NOT call the invocation argument
function handler(originalScript, outProps, invocation) {

  var allHandlerStatements = null;
  var prunedHandlerStatements = null;
  var expI = 0, i = 0, j = 0;
  var pattern = null;
  var curStatement = null;
  var name = null, value = null;

  // Remove any form submit statements
  allHandlerStatements = originalScript.split(";");
  if (0 >= allHandlerStatements.length) {
    return;
  }
  prunedHandlerStatements = new Array();
  for (i = 0; i < allHandlerStatements.length; i++) {
    // If the current statement does not contain the submit...
    if (-1 == allHandlerStatements[i].search(".*submit[ ]*\([ ]*\)")) {
      // copy it to the prunedHandlerStatements.
      prunedHandlerStatements[j++] = allHandlerStatements[i];
    }
  }

  // Copy any name/value pair statements to the outProps associative array
  if (null == prunedHandlerStatements) {
    return;
  }
  for (i = 0; i < prunedHandlerStatements.length; i++) {
    // Hack: assume we're using the [''] syntax.  A more general
    // solution would discover this dynamically.
    if (-1 != (expI = prunedHandlerStatements[i].lastIndexOf("[\'"))) {
      curStatement = prunedHandlerStatements[i].substring(expI + 2);
      name = null;
      value = null;
      // Extract the parameter name.
      if (-1 != (expI = curStatement.indexOf("\']"))) {
        name = curStatement.substring(0, expI);
        // Extract the parameter value
        if (-1 != (expI = 
            prunedHandlerStatements[i].lastIndexOf("\.value"))){
          if (-1 != (expI = 
            prunedHandlerStatements[i].indexOf("=", expI))) {
            value = prunedHandlerStatements[i].substring(expI + 1);
            // strip off the leading and trailing ' if necessary
            if (null != value && "\'" == value.charAt(0)) {
              if ("\'" == value.charAt(value.length - 1)) {
                  value = value.substring(1, value.length - 1);
              }
            }
          }
        }
        if (null != name && null != value) {
          outProps[name] = value;
        }
      }
    }
  }    
}
--&gt;
&lt;/script&gt;
</code></pre>

          <p>The details of the <code>replaceOnMouseDown</code> function
          are described in the docs for the <code>eventHook</code>
          attribute.</p>

          <p>If "output" is specified as the value, none of the child
          elements are modified.</p>

          ]]>

        </description>
        <name>eventHook</name>
        <required>false</required>
        <deferred-value>
	    <type>java.lang.String</type>
        </deferred-value>
    </attribute>

  </tag>

</taglib>
