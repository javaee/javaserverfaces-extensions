<?xml version="1.0" encoding="UTF-8" ?>

<!--  
 $Id: jsf-extensions.tld,v 1.4 2005/12/15 00:00:54 edburns Exp $ -->


<taglib xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd"
    version="2.1">


  <description>
    Tags for components in the jsf-extensions library
  </description>

  <tlib-version>0.03</tlib-version>
  <short-name>jsfExt</short-name>
  <uri>http://java.sun.com/jsf/extensions/dynafaces</uri>

  <listener>
    <listener-class>com.sun.faces.extensions.avatar.event.DynaFacesContextListener</listener-class>
  </listener>

  <tag>
    <description>
       <![CDATA[<p>Convenience component for rendering all the scripts
       necessary for using the jsf-extensions ajax feature.  Place this
       inside &lt;f:view&gt; yet before any usages of the AJAX
       JavaScript objects.  Subsequent occurrences of this tag in the
       page will produce no output.</p>]]>
    </description>
            
    <name>scripts</name>
    <tag-class>com.sun.faces.extensions.avatar.taglib.ScriptsTag</tag-class>
    <body-content>JSP</body-content>
    <attribute>
        <description>
          <![CDATA[

          <p>JSF Component Id</p>

          ]]>

        </description>
      <name>id</name>
    </attribute>
  </tag>
  
  <tag>
    <description>
       <![CDATA[<p>This is essentially a smart div tag that enables the
       easy ajaxification of a portion of the page.  When using this
       tag, any elements within the zone are updated via AJAX.  If using
       multiple zones on a single page, all of them are updated for each
       AJAX request.  The default behavior of this component is to
       AJAXify every input component within the zone, but the set of
       components within the zone that should be AJAXified can be
       customized with the <code>inspectElement</code> attribute.</p>]]>
    </description>
    <name>ajaxZone</name>
    <tag-class>com.sun.faces.extensions.avatar.taglib.AjaxZoneTag</tag-class>
    <body-content>JSP</body-content>
    <attribute>
        <description>
          <![CDATA[

          <p>JSF Component Id for this zone.</p>

          ]]>

        </description>
      <name>id</name>
    </attribute>
    <attribute>
        <description>
          <![CDATA[

          <p>Convey CSS style information to the renderer</p>

          ]]>

        </description>
        <name>style</name>
        <required>false</required>
        <deferred-value>
	    <type>java.lang.String</type>
        </deferred-value>
    </attribute>
    <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute is a <code>MethodExpression</code> to
          invoke when the request processing lifecycle in which this zone
          is being processed encounters its invokeApplication phase.</p>

          ]]>

        </description>
        <name>action</name>
        <required>false</required>
        <deferred-method>
          <method-signature>
            java.lang.Object action()
          </method-signature>
        </deferred-method>
    </attribute>
    <attribute>
        <description>
            <![CDATA[Flag indicating that, if this component is activated by the user,
            notifications should be delivered to interested listeners and actions
            immediately (that is, during Apply Request Values phase) rather than
            waiting until Invoke Application phase.]]>
        </description>
        <name>
            immediate
        </name>
        <required>
            false
        </required>
        <deferred-value>
            <type>
                boolean
            </type>
        </deferred-value>
    </attribute>
    
    <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute identifies a function that tells the 
          system which kinds of elements within this zone to instrument with 
          AJAX behavior.  The function must conform to the following signature:
          </p>
          
          
<pre><code>
function inspectElement(element);
</code></pre>

         <p>This optional argument is the name of a function that must
         return <code>true</code> to indicate that the element should be
         instrumented for AJAX behavior.  If not specified, the default
         <code>inspectElement</code> function will return
         <code>true</code> for every child of this zone that is an HTML
         <code>input</code>, <code>button</code>, or <code>option</code>
         tag.  Example:</p>

<pre><code>
&lt;jsfExt:ajaxZone 
&nbsp;&nbsp;&nbsp;inspectElement="inspectElement" <br /> 
&nbsp;&nbsp;&nbsp;collectPostData="replaceOnMouseDown"&gt;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;d:scroller&gt;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &lt;!-- nested components  --&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/d:scroller&gt;<br /> 
&lt;/jsfExt:ajaxZone&gt;<br /> 

&lt;script type="text/JavaScript"&gt;<br /> 
&lt;!--<br /> 
function inspectElement(element) {<br />
&nbsp;&nbsp;var result = false;<br />
&nbsp;&nbsp;if (null != element) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;var tagName = element.nodeName;<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (null != tagName) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (-1 != tagName.toLowerCase().substring("input")) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = true;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;return result;<br />
}<br />
--&gt;<br /> 
&lt;/script&gt;<br /> 

</code></pre>

          ]]>

        </description>
        <name>inspectElement</name>
        <required>false</required>
        <deferred-value>
	    <type>java.lang.String</type>
        </deferred-value>
    </attribute>

    <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute indicates what kind of JavaScript
          event to intercept with the function named as the value of the
          <code>collectPostData</code> attribute.  If not specified, the
          "onclick" JavaScript event is intercepted.  For example:
          </p>

<pre><code>
&lt;jsfExt:ajaxZone eventType="onmousedown" <br /> 
&nbsp;&nbsp;&nbsp;collectPostData="replaceOnMouseDown"&gt;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;d:scroller&gt;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &lt;!-- nested components  --&gt;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/d:scroller&gt;<br /> 
&lt;/jsfExt:ajaxZone&gt;
</code></pre>
          ]]>

        </description>
        <name>eventType</name>
        <required>false</required>
        <deferred-value>
	    <type>java.lang.String</type>
        </deferred-value>
    </attribute>

    <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute names a function to be called when
          the JavaScript event specified by the value of the
          <code>eventType</code> occurs.  The function must conform to
          the following signature:
          </p>

<pre><code>
function handler(ajaxZone, element, originalScript, outProps, invocation);
</code></pre>

          <p><code>ajaxZone</code> is the ajaxZone element that is
          the parent of the element that is receiving the event.  
          <element> is the element receiving the event.
          <code>originalScript</code> is the value of the event as
          specified in the original rendered code.
          <code>invocation</code> is an associative array with two
          properties: <code>invocation.args</code> is an array of the arguments
          passed to the target event handler from the browser.
          note that <code>invocation.args[0]</code> is the JavaScript event.
          <code>invocation.proceed</code> is a function you can call that will
          call the target event handler.  The return value from the
          <code>proceed</code> function can be acted on in the handler
          as appropriate.  <code>"outProps"</code> is a pre-allocated
          associative array whose contents will be submitted with the
          ajax request to the server in response to this zone receiving
          the JavaScript event specified in the <code>eventType</code>
          attribute.  For example the following <code>ajaxZone</code>
          tag will intercept the <code>onmousedown</code> event call the
          function named "replaceOnMouseDown".</p>

<pre><code>
&lt;jsfExt:ajaxZone collectPostData="handler"&gt;<br /> 
  &lt;d:scroller&gt;<br /> 
    &lt;!-- nested components  --&gt;<br /> 
  &lt;/d:scroller&gt;<br /> 
&lt;/jsfExt:ajaxZone&gt;<br /> 
<br /> 
&lt;script type="text/JavaScript"&gt;<br /> 
&lt;!--<br /> 
// Take the original script, extract any name/value pairs<br /> 
// found within the script, place them into the outProps <br /> 
// associative array.  DO NOT call the invocation argument<br /> 
function handler(element, originalScript, outProps, invocation) {<br /> 
<br /> 
&nbsp;&nbsp;var allHandlerStatements = null;<br /> 
&nbsp;&nbsp;var prunedHandlerStatements = null;<br /> 
&nbsp;&nbsp;var expI = 0, i = 0, j = 0;<br /> 
&nbsp;&nbsp;var pattern = null;<br /> 
&nbsp;&nbsp;var curStatement = null;<br /> 
&nbsp;&nbsp;var name = null, value = null;<br /> 
<br /> 
&nbsp;&nbsp;// Remove any form submit statements<br /> 
&nbsp;&nbsp;allHandlerStatements = originalScript.split(";");<br /> 
&nbsp;&nbsp;if (0 >= allHandlerStatements.length) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;return;<br /> 
&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;prunedHandlerStatements = new Array();<br /> 
&nbsp;&nbsp;for (i = 0; i < allHandlerStatements.length; i++) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;// If the current statement does not contain the submit...<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;if (-1 == allHandlerStatements[i].search(".*submit[ ]*\([ ]*\)")) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// copy it to the prunedHandlerStatements.<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prunedHandlerStatements[j++] = allHandlerStatements[i];<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;}<br /> 
<br /> 
&nbsp;&nbsp;// Copy any name/value pair statements to the outProps associative array<br /> 
&nbsp;&nbsp;if (null == prunedHandlerStatements) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;return;<br /> 
&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;for (i = 0; i < prunedHandlerStatements.length; i++) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;// Hack: assume we're using the [''] syntax.  A more general<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;// solution would discover this dynamically.<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;if (-1 != (expI = prunedHandlerStatements[i].lastIndexOf("[\'"))) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curStatement = prunedHandlerStatements[i].substring(expI + 2);<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = null;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = null;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Extract the parameter name.<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (-1 != (expI = curStatement.indexOf("\']"))) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = curStatement.substring(0, expI);<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Extract the parameter value<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (-1 != (expI = <br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prunedHandlerStatements[i].lastIndexOf("\.value"))){<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (-1 != (expI = <br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prunedHandlerStatements[i].indexOf("=", expI))) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = prunedHandlerStatements[i].substring(expI + 1);<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// strip off the leading and trailing ' if necessary<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (null != value && "\'" == value.charAt(0)) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ("\'" == value.charAt(value.length - 1)) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = value.substring(1, value.length - 1);<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (null != name && null != value) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outProps[name] = value;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;}    <br /> 
}<br /> 
--&gt;<br /> 
&lt;/script&gt;<br /> 
</code></pre>

]]>

</description>
<name>collectPostData</name>
<required>false</required>
<deferred-value>
	    <type>java.lang.String</type>
</deferred-value>
</attribute>

      <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute names a function to be called after
          the new content from the server for this zone has been
          installed into the view.  The function must conform to
          the following signature:</p>

<pre><code>
function postReplace(ajaxZone, innerHTML, [closure]);
</code></pre>

<p>This function is called after the markup replacement for each
component that needs to be re-rendered with data from this ajax
response.  The optional argument <code>closure</code> is whatever was
passed as the <code>closure</code> option to the
<code>Faces.Event</code> or <code>Faces.DeferredEvent</code> that initiated
the ajax request for this response.</p>

]]>

</description>
<name>postReplace</name>
<required>false</required>
<deferred-value>
	    <type>java.lang.String</type>
</deferred-value>
</attribute>

    <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute is or names a JavaScript function
          that will be called when the system needs to replace a chunk
          of markup in the view based on the return from the server.
          The function must conform to the following signature.
          </p>

<pre><code>
function replaceElement(id, content, [closure]);
</code></pre>

          <p>The function is expected to take the content of the
          <code>content</code> argument and replace the DOM element
          referenced by the <code>id</code> argument.  The function is
          expected to invoke any scripts that may be present in
          <code>content</code>.  The optional argument
          <code>closure</code> is whatever was passed as the
          <code>closure</code> option to the <code>Faces.Event</code> or
          <code>Faces.DeferredEvent</code> that initiated the ajax request for
          this response.</p>

          ]]>

        </description>
        <name>replaceElement</name>
        <required>false</required>
        <deferred-value>
	    <type>java.lang.String</type>
        </deferred-value>
    </attribute>

    <attribute>
        <description>
          <![CDATA[

          <p>This function is called to provide a closure argument that
          will be passed to the ajax request and made available to the
          ajax response in the <code>replaceElement</code> or
          <code>postReplace </code> functions.  The function must
          conform to the following signature.
          </p>

<pre><code>
function getClosure(ajaxZone, element);
</code></pre>

          <p>The function must return a JavaScript Object.</p>

          ]]>

        </description>
        <name>getCallbackData</name>
        <required>false</required>
        <deferred-value>
	    <type>java.lang.String</type>
        </deferred-value>
    </attribute>




</tag>

</taglib>
