<?xml version="1.0" encoding="UTF-8" ?>

<!--  
 $Id: jsf-extensions.tld,v 1.4 2005/12/15 00:00:54 edburns Exp $ -->


<taglib xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd"
    version="2.1">


  <description>
    Tags for components in the jsf-extensions library
  </description>

  <tlib-version>0.03</tlib-version>
  <short-name>avatar</short-name>
  <uri>http://java.sun.com/jsf/extensions/avatar</uri>

  <tag>
    <name>scripts</name>
    <tag-class>com.sun.faces.extensions.avatar.taglib.ScriptsTag</tag-class>
    <body-content>JSP</body-content>
    <attribute>
        <description>
          <![CDATA[

          <p>JSF Component Id</p>

          ]]>

        </description>
      <name>id</name>
    </attribute>
  </tag>
  
  <tag>
    <name>ajaxZone</name>
    <tag-class>com.sun.faces.extensions.avatar.taglib.AjaxZoneTag</tag-class>
    <body-content>JSP</body-content>
    <attribute>
        <description>
          <![CDATA[

          <p>JSF Component Id for this zone.</p>

          ]]>

        </description>
      <name>id</name>
    </attribute>
    <attribute>
        <description>
          <![CDATA[

          <p>Convey CSS style information to the renderer</p>

          ]]>

        </description>
        <name>style</name>
        <required>false</required>
        <deferred-value>
	    <type>java.lang.String</type>
        </deferred-value>
    </attribute>
    <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute is a <code>MethodExpression</code> to
          invoke when the request processing lifecycle in which this zone
          is being processed encounters its invokeApplication phase.</p>

          ]]>

        </description>
        <name>action</name>
        <required>false</required>
        <deferred-method>
          <method-signature>
            java.lang.Object action()
          </method-signature>
        </deferred-method>
    </attribute>
    <attribute>
        <description>
            <![CDATA[Flag indicating that, if this component is activated by the user,
            notifications should be delivered to interested listeners and actions
            immediately (that is, during Apply Request Values phase) rather than
            waiting until Invoke Application phase.]]>
        </description>
        <name>
            immediate
        </name>
        <required>
            false
        </required>
        <deferred-value>
            <type>
                boolean
            </type>
        </deferred-value>
    </attribute>
    
    <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute identifies a function that tells the 
          system which kinds of elements within this zone to instrument with 
          AJAX behavior.  The function must conform to the following signature:
          </p>
          
          
<pre><code>
function inspectElement(element);
</code></pre>

         <p>The function must return true to indicate that the element 
         should be instrumented for AJAX behavior.  Example:</p>

<pre><code>
&lt;jsfExt:ajaxZone interactionType="input" <br /> 
&nbsp;&nbsp;&nbsp;eventType="onmousedown" <br /> 
&nbsp;&nbsp;&nbsp;inspectElementHook="inspectElement" <br /> 
&nbsp;&nbsp;&nbsp;eventHook="replaceOnMouseDown"&gt;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;d:scroller&gt;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &lt;!-- nested components  --&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/d:scroller&gt;<br /> 
&lt;/jsfExt:ajaxZone&gt;<br /> 

function inspectElement(element) {
  var result = false
  if (null != element) {
    var tagName = element.nodeName;
    if (null != tagName) {
      if (-1 != tagName.toLowerCase().substring("input")) {
        result = true;
      }
    }
  }
  return result;
}

</code></pre>

          ]]>

        </description>
        <name>inspectElementHook</name>
        <required>false</required>
        <deferred-value>
	    <type>java.lang.String</type>
        </deferred-value>
    </attribute>
    <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute indicates what kind of components
          are contained within this zone.  Valid values are "input" and
          "output".  If not present the default is "output".  A value of
          "input" will cause the DOM children of this component to have
          the event handler specified as the value of the "eventType"
          attribute replaced with the user supplied function given as
          the value of the "eventHook" attribute.  For example, if the
          components inside this zone did a form submit on the
          "onmousedown" event, we would indicate our desire to replace
          this "onmousedown" with our own user supplied function like
          this:
          </p>

<pre><code>
&lt;jsfExt:ajaxZone interactionType="input" <br /> 
&nbsp;&nbsp;&nbsp;eventType="onmousedown" <br /> 
&nbsp;&nbsp;&nbsp;eventHook="replaceOnMouseDown"&gt;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;d:scroller&gt;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &lt;!-- nested components  --&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/d:scroller&gt;<br /> 
&lt;/jsfExt:ajaxZone&gt;<br /> 
</code></pre>

          <p>The details of the <code>replaceOnMouseDown</code> function
          are described in the docs for the <code>eventHook</code>
          attribute.</p>

          <p>If "output" is specified as the value, none of the child
          elements are modified.</p>

          ]]>

        </description>
        <name>interactionType</name>
        <required>false</required>
        <deferred-value>
	    <type>java.lang.String</type>
        </deferred-value>
    </attribute>

    <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute indicates what kind of JavaScript
          event to intercept with the function named as the value of the
          <code>eventHook</code> attribute.  For example:
          </p>

<pre><code>
&lt;jsfExt:ajaxZone interactionType="input" eventType="onmousedown" <br /> 
&nbsp;&nbsp;&nbsp;eventHook="replaceOnMouseDown"&gt;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;d:scroller&gt;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &lt;!-- nested components  --&gt;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/d:scroller&gt;<br /> 
&lt;/jsfExt:ajaxZone&gt;
</code></pre>
          ]]>

        </description>
        <name>eventType</name>
        <required>false</required>
        <deferred-value>
	    <type>java.lang.String</type>
        </deferred-value>
    </attribute>

    <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute names a function to be called when
          the JavaScript event specified by the value of the
          <code>eventType</code> occurs.  The function must conform to
          the following signature:
          </p>

<pre><code>
function handler(ajaxZone, element, originalScript, outProps, invocation);
</code></pre>

          <p><code>ajaxZone<code> is the ajaxZone element that is
          the parent of the element that is receiving the event.  
          <element> is the element receiving the event.
          <code>originalScript</code> is the value of the event as
          specified in the original rendered code.
          <code>invocation</code> is an associative array with two
          properties: <code>invocation.args</code> is an array of the arguments
          passed to the target event handler from the browser.
          note that <code>invocation.args[0] is the JavaScript event.
          <code>invocation.proceed</code> is a function you can call that will
          call the target event handler.  The return value from the
          <code>proceed</code> function can be acted on in the handler
          as appropriate.  <code>"outProps"</code> is a pre-allocated
          associative array whose contents will be submitted with the
          ajax request to the server in response to this zone receiving
          the JavaScript event specified in the <code>eventType</code>
          attribute.  For example the following <code>ajaxZone</code>
          tag will intercept the <code>onmousedown</code> event call the
          function named "replaceOnMouseDown".</p>

<pre><code>
&lt;jsfExt:ajaxZone interactionType="input" eventType="onmousedown" <br /> 
          eventHook="handler"&gt;<br /> 
  &lt;d:scroller&gt;<br /> 
    &lt;!-- nested components  --&gt;<br /> 
  &lt;/d:scroller&gt;<br /> 
&lt;/jsfExt:ajaxZone&gt;<br /> 
<br /> 
&lt;script type="text/JavaScript"&gt;<br /> 
&lt;!--<br /> 
// Take the original script, extract any name/value pairs<br /> 
// found within the script, place them into the outProps <br /> 
// associative array.  DO NOT call the invocation argument<br /> 
function handler(element, originalScript, outProps, invocation) {<br /> 
<br /> 
&nbsp;&nbsp;var allHandlerStatements = null;<br /> 
&nbsp;&nbsp;var prunedHandlerStatements = null;<br /> 
&nbsp;&nbsp;var expI = 0, i = 0, j = 0;<br /> 
&nbsp;&nbsp;var pattern = null;<br /> 
&nbsp;&nbsp;var curStatement = null;<br /> 
&nbsp;&nbsp;var name = null, value = null;<br /> 
<br /> 
&nbsp;&nbsp;// Remove any form submit statements<br /> 
&nbsp;&nbsp;allHandlerStatements = originalScript.split(";");<br /> 
&nbsp;&nbsp;if (0 >= allHandlerStatements.length) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;return;<br /> 
&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;prunedHandlerStatements = new Array();<br /> 
&nbsp;&nbsp;for (i = 0; i < allHandlerStatements.length; i++) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;// If the current statement does not contain the submit...<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;if (-1 == allHandlerStatements[i].search(".*submit[ ]*\([ ]*\)")) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// copy it to the prunedHandlerStatements.<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prunedHandlerStatements[j++] = allHandlerStatements[i];<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;}<br /> 
<br /> 
&nbsp;&nbsp;// Copy any name/value pair statements to the outProps associative array<br /> 
&nbsp;&nbsp;if (null == prunedHandlerStatements) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;return;<br /> 
&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;for (i = 0; i < prunedHandlerStatements.length; i++) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;// Hack: assume we're using the [''] syntax.  A more general<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;// solution would discover this dynamically.<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;if (-1 != (expI = prunedHandlerStatements[i].lastIndexOf("[\'"))) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curStatement = prunedHandlerStatements[i].substring(expI + 2);<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = null;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = null;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Extract the parameter name.<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (-1 != (expI = curStatement.indexOf("\']"))) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = curStatement.substring(0, expI);<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Extract the parameter value<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (-1 != (expI = <br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prunedHandlerStatements[i].lastIndexOf("\.value"))){<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (-1 != (expI = <br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prunedHandlerStatements[i].indexOf("=", expI))) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = prunedHandlerStatements[i].substring(expI + 1);<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// strip off the leading and trailing ' if necessary<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (null != value && "\'" == value.charAt(0)) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ("\'" == value.charAt(value.length - 1)) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = value.substring(1, value.length - 1);<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (null != name && null != value) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outProps[name] = value;<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;}<br /> 
&nbsp;&nbsp;}    <br /> 
}<br /> 
--&gt;<br /> 
&lt;/script&gt;<br /> 
</code></pre>

]]>

</description>
<name>eventHook</name>
<required>false</required>
<deferred-value>
	    <type>java.lang.String</type>
</deferred-value>
</attribute>

      <attribute>
        <description>
          <![CDATA[

          <p>This optional attribute names a function to be called after
          the new content from the server for this zone has been
          installed into the view.  The function must conform to
          the following signature:</p>

<pre><code>
function postInstallHook(ajaxZone, innerHTML);
</code></pre>


]]>

</description>
<name>postInstallHook</name>
<required>false</required>
<deferred-value>
	    <type>java.lang.String</type>
</deferred-value>
</attribute>



</tag>

</taglib>
