Vaadin requires two subclasses be created.

1.  @WebServlet(urlPatterns = {"/ui/*", "/VAADIN/*"})
    public static class MyServlet extends AbstractApplicationServlet

2. public class MainUI extends Application

In JavaJSF, I would like to avoid the necessity for 1.

To do this, I want to introduce an annotation you stick on your
Application class to declare it to the bootstrapping system.

To do that, I need to expose the com.sun.faces.spi for InjectionProvider.

InjectionProvider
InjectionProviderFactory
com.sun.faces.spi.AnnotationScanner

How a composite component is created, initialized, and populated.

0. ComponentTagHandlerDelegateImpl.apply() calls
   CompositeComponentTagHandler.createComponent().

1. CompositeComponentTagHandler.createComponent() calls
   Application.createComponent(Resource).

  2. FaceletVDL.getComponentMetadata() calls createComponentMetadata().
     This creates a temporary NamingContainer UIComponent that serves as
     the cc root and a temporary PanelGroup component that is set as the
     COMPOSITE_FACET_NAME facet of the cc root.

    3. If isBuildingMetadata is true, InterfaceHandler.apply() will call
       imbueComponentWithMetadata(). This includes the
       DeclareFacetHandler.

  4. back in createComponentMetadata(), we extract the BeanInfo from the
     temporary NamingContainer UIComponent and return it.

  5. back in createComponent(), we create the *real* cc root and take
     the BeanInfo and the ccresource and put them both in the cc root's
     attr Map.

2. back in ComponentTagHandlerDelegateImpl.apply(), we call
     doNewComponentActions().  We don't need to replicate this in javajsf.

3. assignUniqueId(): this is important, we must do this.  Copy from
     ComponentTagHandlerDelegateImpl.assignUniqueId().

4. in ComponentTagHandlerDelegateImpl.apply(), call
     owner.applyNextHandler().  This is important.

   This calls CompositeComponentTagHandler.applyNextHandler(), 

    do setAttributes().  

    skip super.applyNextHandler(). The point of this method is to let
     the child elements of the cc component tag in the using page get
     applied.  In javajsf, we don't have those yet.

    do applyCompositeComponent().  We need to replicate these steps.

    do the retargeting.

SECTION: FACET

How a facet is added when using a regular composite component page.

1. when the <f:facet> tag is applied, ComponentSupport.addComponent() is called.

  This does parent.getFacets().put(facetName, child) where parent is the
  UINamingContainer that is the composite component and child is the
  direct child component of the <f:facet> element.

2. RenderFacetHandler.onComponentPopulated() is called.  The parent is
the UIPanel.  The child is the OutputCompositeFacet UIOutput. At
this point, we *do* have the name of the facet, and we push this into
the.  

3. CompositeFacetRenderer.encodeChildren() is called.  


Q: Is the OutputCompositeFacet getting created and added to the tree in
the case of JavaJsf?
A: yes.

SECTION: ReapplySomeFaceletsAfterInit

After fabricating the facelet and applying it, extract the first
ComponentHandler you encounter in traversing the handlers and save it
aside, along with the NamingContainer component.


After the init() method returns, travese this list and re-apply the
facelets to each composite component created.

20110917

In the case of javajsf, FACET.2 happens first.  Then app.init() get a
crack at adding facets, which is the intent of FACET.1.  I try to
re-apply the facelet to force FACET.1 and FACET.2 to happen again.

Change ReapplySomeFaceletsAfterInit to simply, for each created
composite component, manually take the steps in FACET.2.























The thing do to might be to return to the approach of having javajsf
create the composite compnent using
application.createComponent(Resource), and make it so
ReapplySomeFaceletsAfterInit is really ApplySomeFaceletsAfterInit and
they happen to find the already created composite components.


The issue of making it so the instances created by a call to
application.init() are correctly state managed.

Consider using createComponent(ValueExpression, FacesContext, componentType, rendererType)

*But* this doesn't work for composite components.  This is bug
JAVASERVERFACES_SPEC_PUBLIC-600.


form is 31d908 on save, same on postback.

