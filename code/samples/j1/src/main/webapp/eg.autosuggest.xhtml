<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
	  xmlns:f="http://java.sun.com/jsf/core"
	  xmlns:e="http://www.enverio.com/jsf"
	  xmlns:ui="http://java.sun.com/jsf/facelets"
	  xmlns:d="http://java.sun.com/jsf/facelets/demo">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Facelets JavaOne Demo</title>
</head>

<body>

<ui:composition template="_template.xhtml">
<ui:define name="head">
<style type="text/css">
    div.auto_complete {
      position:absolute;
      width:250px;
      background-color:white;
      border:1px solid #888;
      margin:0px;
      padding:0px;
	  text-align: left;
    }
    div.auto_complete ul  {
      list-style-type: none;
      margin:0px;
      padding:0px;
    }
    div.auto_complete ul li.selected { background-color: #ffb; }
    div.auto_complete li {
      list-style-type: none;
      display:block;
      margin:0;
      padding:2px;
      height:16px;
    }
	dt {
		padding-top: 5px;
	}
</style>
</ui:define>
<ui:define name="body">
<h3>Auto Suggest</h3>
<p>The token AJAX widget for frameworks.  This example shows how a developer can easily customize the presentation of the widget, just as they would with any other content on the page with server-side templating.</p>
<div class="wrapper" style="text-align:center; ">







<!-- EXAMPLE: START -->

<e:serverSuggest id="foo" value="#{requestScope.foo}" from="#{company.suggestEmployees}">
<b>#{item.firstName}</b> #{item.lastName}
</e:serverSuggest>

<!-- EXAMPLE: END -->





</div>



<d:source id="src0"><i>// page.xhtml</i>
&lt;e:serverSuggest
    value="\#{bean.empName}"
    from="\#{company.suggestEmployees}">
    <b>\#{item.lastName}, \#{item.firstName}</b>
&lt;/e:serverSuggest>

<i>// Company.java</i>
public Iterable suggestEmployees(String value) {
   return em.createQuery("from Employees where ...")
          .setParameter("search", value)
          .setMaxResults(5)
          .getResultList(); 
}</d:source>

<h3>Contextual Auto Suggest</h3>
<p>Ideally, we want everything to work just as we described it on the server.  Many times you can run into issues with referencing/using variables that are contextual or volatile within the execution of the page.  The example below shows that this isn't an issue for JavaServer Faces.</p>

<!-- EXAMPLE: START -->
<div class="wrapper">
<dl>
<ui:repeat value="#{company.departments}" var="dept">
<dt>#{dept.name}</dt>
<dd>
<e:serverSuggest value="#{requestScope.foo}" from="#{dept.suggestEmployees}">
#{item.lastName}, #{item.firstName}
</e:serverSuggest>
</dd>
</ui:repeat>
</dl>
</div>
<!-- EXAMPLE: END -->

<d:source id="src1"><i>// page.xhtml</i>
&lt;dl>
&lt;ui:repeat value="\#{company.departments}" var="<b>dept</b>">
    &lt;dt>\#{dept.name}&lt;/dt>
    &lt;dd>
    &lt;e:serverSuggest 
	    value="\#{bean.empName}"
	    from="<b>\#{dept.suggestEmployees}</b>">
        \#{item.lastName}, \#{item.firstName}
    &lt;/e:serverSuggest>
    &lt;/dd>
&lt;/ui:repeat>
&lt;/dl>

<i>// Department.java</i>
public Iterable suggestEmployees(String value) {
   return em.createQuery("from Employees where ...")
          .setParameter("search", value)
          .setParameter("deptId", this.id)
          .setMaxResults(5)
          .getResultList(); 
}</d:source>

</ui:define>
</ui:composition>

</body>
</html>
